#include "oputil.h"

const char* OpUtil::name(int opcode) {
  switch (opcode) {
    case STOP_CODE: return "STOP_CODE";
    case POP_TOP: return "POP_TOP";
    case ROT_TWO: return "ROT_TWO";
    case ROT_THREE: return "ROT_THREE";
    case DUP_TOP: return "DUP_TOP";
    case ROT_FOUR: return "ROT_FOUR";
    case NOP: return "NOP";
    case UNARY_POSITIVE: return "UNARY_POSITIVE";
    case UNARY_NEGATIVE: return "UNARY_NEGATIVE";
    case UNARY_NOT: return "UNARY_NOT";
    case UNARY_CONVERT: return "UNARY_CONVERT";
    case UNARY_INVERT: return "UNARY_INVERT";
    case BINARY_POWER: return "BINARY_POWER";
    case BINARY_MULTIPLY: return "BINARY_MULTIPLY";
    case BINARY_DIVIDE: return "BINARY_DIVIDE";
    case BINARY_MODULO: return "BINARY_MODULO";
    case BINARY_ADD: return "BINARY_ADD";
    case BINARY_SUBTRACT: return "BINARY_SUBTRACT";
    case BINARY_SUBSCR: return "BINARY_SUBSCR";
    case BINARY_FLOOR_DIVIDE: return "BINARY_FLOOR_DIVIDE";
    case BINARY_TRUE_DIVIDE: return "BINARY_TRUE_DIVIDE";
    case INPLACE_FLOOR_DIVIDE: return "INPLACE_FLOOR_DIVIDE";
    case INPLACE_TRUE_DIVIDE: return "INPLACE_TRUE_DIVIDE";
    case SLICE: return "SLICE";
    case SLICE+1: return "SLICE+1";
    case SLICE+2: return "SLICE+2";
    case SLICE+3: return "SLICE+3";
    case STORE_SLICE: return "STORE_SLICE";
    case STORE_SLICE+1: return "STORE_SLICE+1";
    case STORE_SLICE+2: return "STORE_SLICE+2";
    case STORE_SLICE+3: return "STORE_SLICE+3";
    case DELETE_SLICE: return "DELETE_SLICE";
    case DELETE_SLICE+1: return "DELETE_SLICE+1";
    case DELETE_SLICE+2: return "DELETE_SLICE+2";
    case DELETE_SLICE+3: return "DELETE_SLICE+3";
    case STORE_MAP: return "STORE_MAP";
    case INPLACE_ADD: return "INPLACE_ADD";
    case INPLACE_SUBTRACT: return "INPLACE_SUBTRACT";
    case INPLACE_MULTIPLY: return "INPLACE_MULTIPLY";
    case INPLACE_DIVIDE: return "INPLACE_DIVIDE";
    case INPLACE_MODULO: return "INPLACE_MODULO";
    case STORE_SUBSCR: return "STORE_SUBSCR";
    case DELETE_SUBSCR: return "DELETE_SUBSCR";
    case BINARY_LSHIFT: return "BINARY_LSHIFT";
    case BINARY_RSHIFT: return "BINARY_RSHIFT";
    case BINARY_AND: return "BINARY_AND";
    case BINARY_XOR: return "BINARY_XOR";
    case BINARY_OR: return "BINARY_OR";
    case INPLACE_POWER: return "INPLACE_POWER";
    case GET_ITER: return "GET_ITER";
    case PRINT_EXPR: return "PRINT_EXPR";
    case PRINT_ITEM: return "PRINT_ITEM";
    case PRINT_NEWLINE: return "PRINT_NEWLINE";
    case PRINT_ITEM_TO: return "PRINT_ITEM_TO";
    case PRINT_NEWLINE_TO: return "PRINT_NEWLINE_TO";
    case INPLACE_LSHIFT: return "INPLACE_LSHIFT";
    case INPLACE_RSHIFT: return "INPLACE_RSHIFT";
    case INPLACE_AND: return "INPLACE_AND";
    case INPLACE_XOR: return "INPLACE_XOR";
    case INPLACE_OR: return "INPLACE_OR";
    case BREAK_LOOP: return "BREAK_LOOP";
    case WITH_CLEANUP: return "WITH_CLEANUP";
    case LOAD_LOCALS: return "LOAD_LOCALS";
    case RETURN_VALUE: return "RETURN_VALUE";
    case IMPORT_STAR: return "IMPORT_STAR";
    case EXEC_STMT: return "EXEC_STMT";
    case YIELD_VALUE: return "YIELD_VALUE";
    case POP_BLOCK: return "POP_BLOCK";
    case END_FINALLY: return "END_FINALLY";
    case BUILD_CLASS: return "BUILD_CLASS";
    case STORE_NAME: return "STORE_NAME";
    case DELETE_NAME: return "DELETE_NAME";
    case UNPACK_SEQUENCE: return "UNPACK_SEQUENCE";
    case FOR_ITER: return "FOR_ITER";
    case LIST_APPEND: return "LIST_APPEND";
    case STORE_ATTR: return "STORE_ATTR";
    case DELETE_ATTR: return "DELETE_ATTR";
    case STORE_GLOBAL: return "STORE_GLOBAL";
    case DELETE_GLOBAL: return "DELETE_GLOBAL";
    case DUP_TOPX: return "DUP_TOPX";
    case LOAD_CONST: return "LOAD_CONST";
    case LOAD_NAME: return "LOAD_NAME";
    case BUILD_TUPLE: return "BUILD_TUPLE";
    case BUILD_LIST: return "BUILD_LIST";
    case BUILD_SET: return "BUILD_SET";
    case BUILD_MAP: return "BUILD_MAP";
    case LOAD_ATTR: return "LOAD_ATTR";
    case COMPARE_OP: return "COMPARE_OP";
    case IMPORT_NAME: return "IMPORT_NAME";
    case IMPORT_FROM: return "IMPORT_FROM";
    case JUMP_FORWARD: return "JUMP_FORWARD";
    case JUMP_IF_FALSE_OR_POP: return "JUMP_IF_FALSE_OR_POP";
    case JUMP_IF_TRUE_OR_POP: return "JUMP_IF_TRUE_OR_POP";
    case JUMP_ABSOLUTE: return "JUMP_ABSOLUTE";
    case POP_JUMP_IF_FALSE: return "POP_JUMP_IF_FALSE";
    case POP_JUMP_IF_TRUE: return "POP_JUMP_IF_TRUE";
    case LOAD_GLOBAL: return "LOAD_GLOBAL";
    case CONTINUE_LOOP: return "CONTINUE_LOOP";
    case SETUP_LOOP: return "SETUP_LOOP";
    case SETUP_EXCEPT: return "SETUP_EXCEPT";
    case SETUP_FINALLY: return "SETUP_FINALLY";
    case LOAD_FAST: return "LOAD_FAST";
    case STORE_FAST: return "STORE_FAST";
    case DELETE_FAST: return "DELETE_FAST";
    case RAISE_VARARGS: return "RAISE_VARARGS";
    case CALL_FUNCTION: return "CALL_FUNCTION";
    case MAKE_FUNCTION: return "MAKE_FUNCTION";
    case BUILD_SLICE: return "BUILD_SLICE";
    case MAKE_CLOSURE: return "MAKE_CLOSURE";
    case LOAD_CLOSURE: return "LOAD_CLOSURE";
    case LOAD_DEREF: return "LOAD_DEREF";
    case STORE_DEREF: return "STORE_DEREF";
    case CALL_FUNCTION_VAR: return "CALL_FUNCTION_VAR";
    case CALL_FUNCTION_KW: return "CALL_FUNCTION_KW";
    case CALL_FUNCTION_VAR_KW: return "CALL_FUNCTION_VAR_KW";
    case SETUP_WITH: return "SETUP_WITH";
    case EXTENDED_ARG: return "EXTENDED_ARG";
    case SET_ADD: return "SET_ADD";
    case MAP_ADD: return "MAP_ADD";

    case DECREF: return "DECREF";
    case INCREF: return "INCREF";
    case CONST_INDEX: return "CONST_INDEX";
    case BINARY_SUBSCR_LIST : return "BINARY_SUBSCR_LIST";
    case BINARY_SUBSCR_DICT : return "BINARY_SUBSCR_DICT";
    case STORE_SUBSCR_LIST : return "STORE_SUBSCR_LIST";
    case STORE_SUBSCR_DICT : return "STORE_SUBSCR_DICT";
    case DICT_CONTAINS : return "DICT_CONTAINS";
    case DICT_GET : return "DICT_GET";
    case DICT_GET_DEFAULT : return "DICT_GET_DEFAULT";
  }

  return "BAD_OP";
}
